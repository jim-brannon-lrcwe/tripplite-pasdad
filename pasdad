#!/bin/sh -e
#
# System startup script for PowerAlert Shutdown Agent
#
# LSB compatible service control script; see http://www.linuxbase.org/spec/
#
# converted to ubuntu compatible script May 2010, Jim Brannon, Leonard Rice Engineers
# -------------------------------------removed
# ---------------------------------------added
# --------------------------------------------
#
### BEGIN INIT INFO
# Provides:          pasdad
# Required-Start:    $network $syslog $remote_fs
# Should-Start:      $time 
# Required-Stop:     $network $syslog $remote_fs
# Should-Stop:       $time 
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: PowerAlert Shutdown Agent
# Description:       Monitor one or two remote devices for shutdown request
### END INIT INFO
#
# Note on runlevels:
# 0 - halt/poweroff 			6 - reboot
# 1 - single user			2 - multiuser without network exported
# 3 - multiuser w/ network (text mode)  5 - multiuser w/ network and X11 (xdm)
# 

#
# Define the application name and make certain it exists
#
PROG_NAME=pasdad
PROG_BIN=/var/tripplite/poweralert/engine/${PROG_NAME}
#
test -x $PROG_BIN || { echo "$PROG_BIN not installed";
	if [ "$1" = "stop" ]; then exit 0;
	else exit 5; fi; }

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     be verbose in local rc status and clear it afterwards
#      rc_status -v -r  ditto and clear both the local and overall rc status
#      rc_status -s     display "skipped" and exit with status 3
#      rc_status -u     display "unused" and exit with status 3
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num>
#      rc_reset         clear both the local and overall rc status
#      rc_exit          exit appropriate to overall rc status
#      rc_active        checks whether a service is activated by symlinks
# -------------------------------------removed
#. /etc/rc.status
# ---------------------------------------added
PATH=/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=${PROG_BIN}
PIDDIR=/var/run/${PROG_NAME}
PIDFILE=${PIDDIR}/${PROG_NAME}.pid
DAEMONUSER=root
DESC="PowerAlert Shutdown Agent"
test -x $DAEMON || exit 0
. /lib/lsb/init-functions
DISALLOW_MODULE_LOADING=1
# --------------------------------------------
# Reset status of this service
# -------------------------------------removed
#rc_reset
# ---------------------------------------added
# --------------------------------------------

# Return values acc. to LSB for all commands but status:
# 0	  - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.

case "$1" in
    start)
# -------------------------------------removed
#	echo -n "Starting PowerAlert Shutdown Agent "
	## Start daemon with startproc(8). If this fails
	## the return value is set appropriately by startproc.
#	startproc -q $PROG_BIN 
#	rc_status -v || rc_exit
# ---------------------------------------added
        log_daemon_msg "Starting $DESC: $PROG_NAME"
	if [ ! -d $PIDDIR ]; then
		mkdir -p $PIDDIR
		chown $DAEMONUSER:$DAEMONUSER $PIDDIR
	fi
	#start-stop-daemon -x $DAEMON -p $PIDFILE --start -- --system --daemonize --high-priority --log-target=syslog --disallow-module-loading=$DISALLOW_MODULE_LOADING
	start-stop-daemon --start --quiet --oknodo --pidfile "$PIDFILE" --exec $DAEMON && success=1
        log_end_msg $?
#---------------------------------------------
	;;
    stop)
# -------------------------------------removed
#	echo -n "Stopping PowerAlert Shutdown Agent "
	## Stop daemon with killproc(8) and if this fails
	## killproc sets the return value according to LSB.
#	killproc -TERM -t 30s $PROG_BIN
#	rc_status -v
# ---------------------------------------added
	log_begin_msg "Stopping $DESC: $PROG_NAME"
	#start-stop-daemon -p $PIDFILE --stop --retry 5 || echo -n "...which is not running"
	start-stop-daemon --stop --quiet --retry 5 --oknodo --pidfile $PIDFILE --name $PROG_NAME && success=1
	log_end_msg $?
# --------------------------------------------
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start
# -------------------------------------removed
	# Remember status and be quiet
#	rc_status
# ---------------------------------------added
	log_end_msg $?
# --------------------------------------------
	;;
    status)
	## Check status with checkproc(8), if process is running
	## checkproc will return with exit status 0.

	# Return value is slightly different for the status command:
	# 0 - service up and running
	# 1 - service dead, but /var/run/  pid  file exists
	# 2 - service dead, but /var/lock/ lock file exists
	# 3 - service not running (unused)
	# 4 - service status unknown :-(
	# 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)
	
	# NOTE: checkproc returns LSB compliant status values.
	# NOTE: rc_status knows that we called this init script with
	# "status" option and adapts its messages accordingly.

# -------------------------------------removed
#	echo -n "Checking PowerAlert Shutdown Agent"
#	/sbin/checkproc $PROG_BIN
#	rc_status -v
# ---------------------------------------added
status_of_proc -p $PIDFILE "$DAEMON" "$DESC" && exit 0 || exit $?
# --------------------------------------------
	;;
    *)
	echo "Usage: $0 {start|stop|status|restart}"
	exit 1
	;;
esac
# -------------------------------------removed
#rc_exit
# ---------------------------------------added
exit 0
# --------------------------------------------

